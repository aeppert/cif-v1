#!/usr/bin/env perl

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = (
        "lib",
        "local/lib",
        "../libcif/lib", # in case we're in -dev mode
    );
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF::Profile;
use Data::Dumper;

my $config          = $opts{'C'} || $ENV{'HOME'}.'/.cif';

our %opts;
getopt('C:', \%opts);
die(usage()) if($opts{'h'});

sub usage {
    return <<EOF;
Usage: perl $0 {options...}

Basic:
    -h  --help:             this message
EOF
}

my ($err,$ret) = CIF::Profile->new({
    config  => $config,
});
die($err) if($err);
my $profile = $ret;

my @array;
require JSON::XS;
my @recs = $profile->user_list({ user => $user });
if($#recs > -1){
    foreach (@recs){
        my $groups = $profile->groups($_->uuid());
        push(@$array,
            {
                token           => $_->uuid(),
                user            => $_->uuid_alias(),
                write           => $_->write(),
                revoked         => $_->revoked(),
                groups          => \@groups,
                read            => 1,
                default_group   => $_->default_guid(),
                expires         => $_->expires(),
            },
        );
    }
    $array = JSON::XS::encode_json($array);
    print $array."\n";
} else {
    if($user){
        print $user." has ";
    }
    print 'no api keys...'."\n";
}
        
exit(0);   